package org.qd4j.qdframework.util;


import java.io.File;
import java.io.FileFilter;
import java.net.URL;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class ClassUtil {


	 /**
    * 获取类加载器
    */
   public static ClassLoader getClassLoader() {
       return Thread.currentThread().getContextClassLoader();
   }
	
	
	//load class
	public static Set<Class<?>> getClassSet(String packgname)
	{
		Set<Class<?>> clSet=new HashSet<Class<?>>();
		try {
			  Enumeration<URL> urls=Thread.currentThread().getContextClassLoader().getResources(packgname.replace(".", "/"));
			  while (urls.hasMoreElements()) {
				URL url = (URL) urls.nextElement();
				if(url!=null)
				{
					String protocal=url.getProtocol();
					//get packagepath
					
					if(protocal.equals("file")){
					     	
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	private static void addClass(Set<Class<?>> setclass,String packgePath,String packgeName){
		File[] files=new File(packgePath).listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				// TODO Auto-generated method stub
				return (pathname.isFile()&&pathname.getName().endsWith(".class"))||pathname.isDirectory();
			}
		});
		for(File fl :files)
		{
			if(fl.isFile())
			{
			String className=fl.getName().substring(0,fl.getName().lastIndexOf(','));
			className=packgeName+"."+className;
			
			}
		}
	}
	
	public static Class<?> loadClass(String className,Boolean isInit){
	      Class.forName(className,isInit,);
	}
}
